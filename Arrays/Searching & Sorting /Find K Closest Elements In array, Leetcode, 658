// Find K Closest Elements In array, Leetcode, 658
// Two pointer Approach Method
class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        int l = 0;
        int h = arr.size()-1;

        while(h-l>=k){
            if(x-arr[l]>arr[h]-x){
                l++;
            }
            else{
                h--;
            }
        }
        return vector<int>(arr.begin()+l,arr.begin()+h+1);
        
    }
};

// Binary Search + Two Pointer Method 2nd method
class Solution {
public:

int lowerBound(vector<int>&arr, int x){
    int start = 0;
    int end = arr.size()-1;
    int ans = -1;
    int mid = (start+end)/2;
    while(start<=end){
        if(arr[mid]>=x){
            ans=mid;
            end= mid-1;
        }
        else if(x>arr[mid]){
            start  = mid+1;
        }
        else{
            end = mid-1;
        }
    }
    return ans;
}
vector<int> bs_method(vector<int>& arr, int k, int x){
    int h = lowerBound(arr, x);
    int l = h-1;

    while(k--){
        if(l<0){
            h++;
        }
        if(h>=arr.size()){
            l--;
        }
        if(x-arr[l] > arr[h]-x){
            h++;
        }
        else{
            l--;
        }
    }
    return vector<int>(arr.begin() + l +1, arr.begin()+h);
}
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        int l = 0;
        int h = arr.size()-1;

        while(h-l>=k){
            if(x-arr[l]>arr[h]-x){
                l++;
            }
            else{
                h--;
            }
        }
        return vector<int>(arr.begin()+l,arr.begin()+h+1);
        
    }
};
