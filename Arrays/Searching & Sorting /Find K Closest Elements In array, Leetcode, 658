// Find K Closest Elements In array, Leetcode, 658
// Two pointer Approach Method
class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        int l = 0;
        int h = arr.size()-1;

        while(h-l>=k){
            if(x-arr[l]>arr[h]-x){
                l++;
            }
            else{
                h--;
            }
        }
        return vector<int>(arr.begin()+l,arr.begin()+h+1);
        
    }
};

// Binary Search + Two Pointer Method 2nd method
class Solution {
public:
    int lowerBound(vector<int>&arr ,int x) {
        int s = 0;
        int e = arr.size()-1;
        int ans = e;
        

        while(s<=e){
            int mid = (s+e)/2;
            if(arr[mid] >= x){
                ans = mid;
                e =  mid-1;
            }
            else if(arr[mid]<x){
                s = mid+1;
            }
            else{
                e = mid-1;
            }
        }
        return ans;
        
    }
    vector<int> bs_Method(vector<int>& arr, int k, int x){
        int h = lowerBound(arr,x);
        int l = h-1;

        while(k--){
            if(l<0){
                h++;
            }
            else if(h>=arr.size()){
                l--;
            }
            else if(x-arr[l]>arr[h]-x){
                l++;
            }
            else{
                h--;
            }
        }
        return vector<int>(arr.begin()+l+1, arr.begin()+h);

    }
    vector<int> findClosestElements(vector<int>& arr, int k, int x){
        return bs_Method(arr,k,x);
    }
};
